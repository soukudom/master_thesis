% options:
% thesis=B bachelor's thesis
% thesis=M master's thesis
% czech thesis in Czech language
% slovak thesis in Slovak language
% english thesis in English language
% hidelinks remove colour boxes around hyperlinks

\documentclass[thesis=M,czech]{FITthesis}[2012/06/26]

\usepackage[utf8]{inputenc} % LaTeX source encoded as UTF-8

\usepackage{graphicx} %graphics files inclusion

\usepackage{dirtree} %directory tree visualisation
\usepackage{makecell}
\usepackage{enumitem}

\renewcommand\theadalign{cb}
\renewcommand\theadfont{\bfseries}
\newcolumntype{C}[1]{>{\centering\arraybackslash}m{#1}}

\newcommand{\tg}{\mathop{\mathrm{tg}}} 
\newcommand{\cotg}{\mathop{\mathrm{cotg}}} 

\department{Katedra počítačových systémů}
\title{Detekce anomálií v~provozu IoT sítí}
\authorGN{Dominik} 
\authorFN{Soukup} 
\authorWithDegrees{Bc. Dominik Soukup} 
\author{Dominik Soukup} 
\supervisor{Ing. Tomáš Čejka}
\acknowledgements{Rád bych poděkoval vedoucímu diplomové práce Ing. Tomáši Čejkovi za odborné vedení, cenné rady a čas věnovaný konzultacím. 
Dále děkuji sdružení CESNET, z.s.p.o. za možnost práce na tomto projektu a poskytnutým
prostředkům pro vývoj vytvořeného nástroje.}
\abstractCS{
Tato diplomová práce se zabývá problematikou bezpečnosti v~prostředí Internet of Things (IoT).
Prvním cílem je analýza aktuálního stavu IoT sítí a~identifikace bezpečnostních slabin
bezdrátových senzorových protokolů. Druhým cílem je vytvoření nástroje, který 
v~probíhající komunikaci detekuje nalezené bezpečnostní incidenty.
V~analytické
části je čtenář seznámen s~principem fog computingu a~nově vzniklým modelem komunikace. Zároveň
jsou důkladně rozebrány aktuálně
používané protokoly včetně jejich bezpečnostních slabin. 
Součástí práce je návrh architektury, který je připraven na budoucí rozšiřování, což je nezbytné
pro rychle se rozvíjející a širokou oblast IoT.
 Při návrhu byl kladen důraz na nízké hardwarové nároky tak, aby bylo možné provozovat
výsledné řešení i na IoT branách s~omezenými prostředky. 

První část výstupu této práce tvoří rešerše aktuálního stavu IoT, která je obsažena v~textu této práce.
Druhou částí
je modulární systém, který lze konfigurovat a~přizpůsobit pro konkrétní
topologii. Výsledný nástroj je implementovaný v~jazyce C++ a~rozšiřuje již existující IoT bránu
BeeeOn o~možnost detekce anomálií v~bezdrátových senzorových protokolech. Výsledkem je nová
verze této brány s~mechanismem pro detekci útoků.

}
\abstractEN{This work covers security concerns and issues of the Internet of Things (IoT). The first aim
is to analyse the actual situation of IoT and to identify vulnerabilities of the wireless sensor network
protocols. The second aim is to develop a tool that is able to detect security incidents in communication traffic.
The analytical part familiarizes the reader with the fog computing concept and new communication architecture.
%(model). 
Simultaneously, there are thoroughly explored current IoT protocols including their vulnerabilities. This
is followed by the tool design that is ready for the future extension, which is necessary for the rapidly
growing area like IoT. During designing, low hardware requirements was emphasised so that it would be
possible to deploy the created solution event on IoT gateways with restricted resources.

The first part of this work output is research of the current IoT state, which is contained in the text of
this work. The second part is a modular system that is possible to configure and customize for
target topology. The created tool is
implemented in C++ language and extends the already
existing IoT gateway BeeeOn by anomaly detection of the wireless sensor network protocols. The result
is a new version of the BeeeOn gateway with the mechanism for attacks detection.
}

\placeForDeclarationOfAuthenticity{V~Praze}
\declarationOfAuthenticityOption{4} 
\keywordsCS{IoT, detekce anomálií, BeeeOn, NEMEA\newpage}
\keywordsEN{IoT, anomaly detection, BeeeOn, NEMEA}



\begin{document}


\begin{introduction}
Koncept internetu existuje již několik desítek let a~pro spoustu lidí se stal 
nedílnou součástí pracovního i osobního života. V~poslední době je možné sledovat
stále rostoucí počet zařízení, která jsou do něj zapojena. Tento trend by měl
pokračovat i do budoucnosti, a~dokonce v~ještě větším měřítku. Odhadem je 
přes 30 miliard připojených zařízení do roku 2020 \cite{iotDevices}.
Důvodem zrychleného
růstu je expanze síťového připojení na veškeré elektronické zařízení a~senzory, 
které umožní vzdálené ovládání a~monitorování. Pro označení tohoto trendu se používá
termín Internet věcí (Internet of Things, IoT).

Cílem IoT je usnadnit, zlepšit a~ušetřit lidskou činnost napříč všemi odvětvími. 
Uplatnění se nachází zejména ve výrobních podnicích, dopravě nebo běžných domácnostech.
Příklad konkrétního nasazení do osobního života popisuje článek \cite{sleeping}, jehož cílem je měření 
kvality spánku a~odhalení případných poruch. Monitorovací systém lze dále 
propojit například s~ovládáním místnosti, které bude reagovat na aktuální úroveň spánku
úpravou světel, oken nebo vzduchu.

Dále je upraven model komunikace, který již nevyžaduje zasílání zpráv centrálnímu 
serveru (north-south), ale podporuje přímou komunikaci mezi připojenými uzly (east-west).
Oblast IoT nezahrnuje jen malá a~nevýkonná zařízení, ale jeho součástí jsou i 
výkonná datová centra a pokročilé algoritmy, které vyhodnocují získané informace.

Hlavní hrozbou Internetu věcí je zejména bezpečnost a ochrana soukromí. Dochází zde k~přenosu
citlivých dat, která slouží
k~automatizovanému řízení dalších
systémů, monitorování prostředí a zabezpečovacím účelům. Zároveň s~masivním rozšířením nově
připojených zařízení roste riziko vzniku nových útoků a možnosti způsobení větších
škod. Příkladem bezpečnostního incidentu je útok na distribuční síť elektrického 
proudu na Ukrajině, který měl dopad na 225 000 zákazníků \cite{ukraine}. 

Pro potlačení vzniku hrozeb musí být součástí každé dnešní IoT sítě sada procesů,
které umožní důvěryhodné
získávání validních dat, vzdálenou správu a možnost
detekce anomálií jako v~běžných IP (Internet Protocol) sítích.

\section{Cíl práce}
Cílem diplomové práce je analyzovat množinu aktuálně používaných protokolů
pro komunikaci v~IoT sítích a identifikovat jejich bezpečnostní zranitelnosti.
Při analýze bude věnována pozornost zejména bezdrátovým senzorovým protokolům.
Na základě získaných znalostí bude navržen, implementován a otestován algoritmus
pro monitorování a automatickou detekci anomálního provozu v~IoT sítích.
Algoritmus bude možné spustit
v~prostředí nově vznikající opensource brány BeeeOn \cite{beeeon}, čímž dojde k~rozšíření 
dostupných bezpečnostních funkcí.
\end{introduction}

\chapter{Analýza}
Kapitola se zabývá analýzou celkové architektury IoT sítí a způsoby pro její
zabezpečení. Postupně je prozkoumán komunikační model, možné bezpečnostní hrozby 
a existující řešení pro obranu. Na základě analýzy jsou uvedeny funkční a nefunkční
požadavky, které jsou kladeny na výsledný program. V~závěru jsou vybrány konkrétní
technologie pro realizaci.

 \input{architektura}


\chapter{Návrh}
Kapitola se zabývá návrhem způsobu detekce anomálií v~IoT sítích, který s~pomocí NEMEA
systému rozšiřuje bránu BeeeOn. Nejprve je popsána celková architektura a
možné způsoby nasazení. Dále následuje popis jednotlivých komponent detekčního systému.
V~závěru jsou identifikovány možné scénáře útoků.

 \input{navrh}

\chapter{Realizace}
Obsahem kapitoly je popis realizace nejzajímavějších částí vytvořeného řešení. Pro zajištění
efektivity a snadné přenositelnosti byla veškeré implementace provedena v~jazyce C++, ve kterém
je zároveň napsána BeeeOn brána. Detekční systém přináší pouze jednu novou závislost a tou je NEMEA framework.
Ostatní použité knihovny se shodují s~již použitými v~BeeeOn bráně.

 \input{realizace}

\chapter{Testování}
V~této kapitole je popsán postup testování vytvořeného detekčního řešení. Nejprve je představeno
testovací prostředí a jsou otestovány obě možné metody nasazení. Dále jsou ověřeny jednotlivé 
případy hrozeb ze~Sekce \ref{utoky} a také jsou prověřeny ostatní funkcionality
detektoru. V~závěru je provedeno měření chování jednotlivých položek z~profilu.

 \input{testy}

\begin{conclusion}

Cílem diplomové práce bylo analyzovat aktuální stav v oblati IoT sítí a identifikovat bezpečnostní 
slabiny. Na základě získaných znalostí byl navržen,
implementován a otestován nástroj
pro monitorování a automatickou detekci anomálního provozu. Výsledný nástroj se skládá z~několika
komponent, které komunikují pomocí systému NEMEA a rozšiřují funkcionalitu IoT brány BeeeOn
o~možnost detekce. 

V~první části této práce byl představen koncept fog computingu, který mění 
způsob zpracování dat v~IoT sítích. Dále byly popsány jednotlivé komunikační vrstvy a detailně rozebrány
aktuálně používané protokoly včetně jejich bezpečnostních slabin. Následně byla věnována 
pozornost možným způsobům detekce útoků a také byly hledány již existující nástroje 
pro řešení této 
problematiky, které v~současnosti nedostatečné pokrývají možné hrozby. Nejméně pokrytá byla 
senzorová vrstva, kde jsou nejzranitelnější bezdrátové komunikační protokoly, které jsou zároveň 
pro svou mobilitu velmi často používané.
V~závěru jsou uvedeny
požadavky na výsledný program a vhodné technologie pro vývoj.

Při návrhu byly splněny všechny kladené požadavky a výsledné řešení bylo navrženo tak, aby jej 
bylo možné nasadit i na IoT branách s~omezenými prostředky nebo v~decentralizovaném prostředí. 
Dále byly popsány scénáře útoků, které se mohou objevit při reálném provozu v~senzorové vrstvě.
V~rámci scénářů byla sestavena množina informací, které je potřeba měřit k~získání přehledu
o~stavu sítě. 

Vzhledem k~pečlivě provedenému návrhu nebylo nutné během implementace řešit žádné problémy. Naopak
díky použitému frameworku NEMEA bylo spoustu věcí usnadněno. Při 
realizaci byly splněny všechny funkční i nefunkční požadavky, které dokonce přesahují nároky 
specifikované v~zadání práce.

Velký důraz byl kladen na testování, které odhalilo řadu implementačních chyb, ale všechny byly
opraveny. V~rámci testů bylo ověřeno úspěšné detekování navržených scénářů útoků, byly
otestovány způsoby nasazení a~také bylo provedeno měření chování položek profilu sítě.

Zpracování této diplomové práce mělo pro mě velký přínos. Dozvěděl jsem se mnoho nových znalostí 
z~oblasti IoT, které jsem si navíc prakticky vyzkoušel. Tato oblast se bude v~dalších
letech rozšiřovat, a proto se získané zkušenosti budou velmi hodit v~dalších projektech.

\section{Budoucí práce}
V~následujících letech je očekáváno velké rozšíření IoT sítí, které jsou řízeny člověkem a 
konfigurovány strojem. Z~tohoto důvodu má tato práce velký potenciál, protože tuto oblast pokrývá
teoretickým i praktickým směrem a může být využita jako základ pro budoucí práce. 

Jedním ze způsobů
rozšíření je použití dalších detekčních metod, které budou využívat externí sondy pro získávání
podrobnějších informací o~daném protokolu. Tyto sondy zároveň mohou sloužit jako honeypoty.

Dalším rozšířením může být externí nástroj, který se bude starat o~generování konfigurace pro 
vytvořený detektor. Generátor nastavení bude velmi vhodný pro koncové uživatele, protože si budou
moci přehledně vybrat své parametry bez znalosti všech závislostí, které textová varianta ani 
modul pro zpracování nehlídá. Případně může být zajímavé využítí strojového učení pro 
určení profilu sítě a konfiguračních parametrů.

Vytvořený program zároveň umožňuje pravidelně 
získávat informace o~profilu sítě, které mohou být využity k~sestavení datového modelu. 
Následně při použití
analytických metod lze provádět pokročilé způsoby detekce.

Důležité bude také pokrytích další komunikačních protokolů, které zahrnují i protokoly síťové 
vrstvy. Pro síťové protokoly může být vhodné využít principů nástroje \textit{Joy} \cite{joy}, 
který se zaměřuje 
na vyhodnocování incidentů v~šifrovaném provozu.
\end{conclusion}

\bibliographystyle{csn690}
\bibliography{mybibliographyfile}

\appendix

\chapter{Seznam použitých zkratek}
% \printglossaries
\begin{description}
	\item[IoT] Internet of Things
	\item[IP] Internet Protocol
	\item[HTTPS] Hypertext Transfer Protocol Secure  
	\item[VPN] Virtual Private Network 
	\item[MQTT] Message Queuing Telemetry Transport 
	\item[CoAP] Constrained Application Protocol 
	\item[AMQP] Advanced Message Queuing Protocol
	\item[DDoS] Distributed Denial Of Service
	\item[MITM] Man In The Middle
	\item[M2M] Machine To Machine 
	\item[TCP] Transmission Control Protocol
	\item[QoS] Quality of Service
	\item[TLS] Transport Layer Security
	\item[RESTful] Representational State Transfer
	\item[UDP] User Datagram Protocol
	\item[HTTP] Hypertext Transfer Protocol
	\item[URI] Uniform resource identifier
	\item[DTLS] Datagram Transport Layer Security
	\item[ISM] Industrial, Scientific and Medical
	\item[AES] Advanced Encryption Standard
	\item[PIN] Personal Identification Number
	\item[QR] Quick Response
	\item[ECDH] Elliptic-curve Diffie–Hellman
	\item[BLE] Bluetooth Low Energy 
	\item[SIG] Special Interest Group
	\item[NFC] Near Field Communication
	\item[IDS] Intrusion Detection System
	\item[IPS] Intrustion Prevention System
	\item[SCADA] Supervisory Control And Data Acquisition
	\item[NEMEA] Network Measurements Analysis
	\item[UniRec] Unified Record
	\item[RAII] Resource Acquisition Is Initialization
	\item[RTT] Round-Trip Time
\end{description}

\chapter{Instalační příručka}
Realizovaný detekční systém pro svůj běh využívá framework NEMEA a projekt BeeeOn. V~následujících
krocích je popsána instalace těchto dvou nástrojů, způsob nasazení kolektoru a
spuštění detekčních modulů.

\begin{enumerate}
 \item \textbf{Instalace projektu BeeeOn}
 
 Zdrojové kódy tohoto projektu se nachází v~repozitáři služby Github. Pro jeho sestavení je nutné
 vykonat následující příkazy: 
\begin{verbatim}
git clone --recursive https://github.com/BeeeOn/gateway.git
cd  gateway
mkdir build
(cd build && cmake ..)
make -C build
\end{verbatim}
 \item \textbf{Instalace NEMEA frameworku}
 
Kompletní zdrojové kódy systému NEMEA jsou také udržovány v~repozitářích služby Github. Pro
vytvořený nástroj je potřeba nasadit část \textit{NEMEA-Framework}.
\begin{verbatim}
git clone https://github.com/CESNET/Nemea-Framework.git
cd Nemea-Framework
./bootstrap.sh
./configure
make
sudo make install
\end{verbatim}

Pro spouštění vytvořených testů nebo pro úpravu příchozích a odchozích dat ve formátu UniRec se
mohou hodit moduly \textit{Logger}, \textit{Logreplay} a~\textit{Merger}, které se nacházejí
v~částí \textit{NEMEA-Modules}. V~tomto 
repozitáři se zároveň nachází vytvořené moduly \textit{Mux} a \textit{Demux}.
\begin{verbatim}
git clone https://github.com/CESNET/Nemea-Modules.git
cd Nemea-Modules
./bootstrap.sh
./configure
make
sudo make install
\end{verbatim}

\item \textbf{Nasazení kolektoru}

V~rámci tohoto kroku je potřeba zdrojové kódy vytvořeného kolektoru přesunout do BeeeOn brány
a upravit konfigurační soubory. Postup je popsán v~následujících sekcích.
\begin{itemize}
 \item \textbf{Přesun zdrojových souborů}
\begin{verbatim}
   cp NemeaCollector.* <adresářBeeeOn>/src/core
   cp fields.* <adresářBeeeOn>/src/core
\end{verbatim}
\item \textbf{Úprava souborů pro kompilaci}
\begin{verbatim}
   vim <adresářBeeeOn>/src/CMakeLists.txt
\end{verbatim}
Do příslušných částí v~souboru je potřeba vložit tyto položky: 
\begin{verbatim}
   find_library (LIBTRAP trap)
   find_library (UNIREC unirec)
   find_library (PCAP pcap)

   ${PROJECT_SOURCE_DIR}/core/fields.cpp
   ${PROJECT_SOURCE_DIR}/core/NemeaCollector.cpp

   ${PCAP}
   ${UNIREC}
   ${LIBTRAP}
\end{verbatim}
Podobné změny je nutné provést v adresáři \textit{test}
\begin{verbatim}
  vim <adresářBeeeOn>/test/CMakeLists.txt
    find_library (LIBTRAP trap)
    find_library (UNIREC unirec)
    find_library (PCAP pcap)
    
    ${PCAP}
    ${UNIREC}
    ${LIBTRAP} 
\end{verbatim}
 \item \textbf{Úprava sestavovací konfigurace brány}
\begin{verbatim}
   vim <adresářBeeeOn>/conf/config.d/factory.xml 
\end{verbatim}
V otevřeném souboru je nutné do odpovídajících elementů vložit tyto parametry:
\begin{verbatim}
   #element instance name="distributor"
   <add name="listener" ref="collector"/>

   #element instance name="bluetoothAvailability"
   <add name="listeners" ref="collector"/>

   #element instance name="zwaveDeviceManager"
   <add name="listeners" ref="collector"/>

   #element instance name="commandDispatcher"
   <add name="listeners" ref="collector"/>

   #element factory
   <instance name="collector" 
             class="BeeeOn::NemeaCollector">
     <set name="onExportInterface" 
          text="u:event-onExport"/>
     <set name="onHCIStatsInterface" 
          text="u:event-onHCIStats"/>
     <set name="onDispatchInterface" 
          text="u:event-onDispatch"/>
     <set name="onNodeStatsInterface" 
          text="u:event-onNodeStats"/>
     <set name="onDriverStatsInterface" 
          text="u:event-onDriverStats"/>
   </instance> 
\end{verbatim} 
\item \textbf{Rekompilace brány}
\begin{verbatim}
   cd <adresářBeeeOn>
   (cd build && cmake ..)
   make -C build
\end{verbatim}
\end{itemize}

\item \textbf{Kompilace detektoru}

Kompilace komponenty detektoru se provede následujícím příkazem:
\begin{verbatim}
g++ DataDetector.cpp fields.cpp ConfigParser.cpp \
Analyzer.cpp -o prg -ltrap -lpcap -lunirec --std=c++11 \
-Wno-write-strings -pthread 
\end{verbatim}
\newpage
\item \textbf{Spuštění detekčního systému}

Posledním krokem je spuštění celého detekčního systému. Pro účely demonstrace je
v~ukázce použit oddělený model nasazení popsaný v Sekci \ref{externalMode}, který zahrnuje více komponent. Při reálném 
použití stačí spustit pouze kolektor a jednu instanci detektoru pro každý typ události. V~uvedené
ukázce každá z~komponent používá standardní výstup, proto je nutné každý příkaz spustit v~samostatném
terminálovém okně.
\begin{verbatim}
cd <adresářBeeeOn> 
build/src/beeeon-gateway -c conf/gateway-testing.ini \
   -Dtesting.center.enable=yes 
mux "u:event-onDriverStats,u:event-onNodeStasts,u:output" \
   -n 2
demux -i "u:output,u:onDriverStats,u:onNodeStats" -n 2
merger -i "u:onDriverStats,u:onNodeStats,u:merged" -n 2
cd <adresářDetector> 
./prg -i "u:merged,u:alert" -v
logger -i "u:alert" -t
logger -i "u:export-dropped0" -t
\end{verbatim}
\end{enumerate}


\chapter{Nástroje pro testování}
V~následující kapitole přílohy se nachází popis způsobu použití nástrojů, které byly uplatněny 
v~rámci testování.

\begin{itemize}
 \item \textbf{Logger}

 Tento NEMEA modul slouží k~ukládání přijatých UniRec zpráv. Při spuštění je nutné zadat 
 přepínač \textit{-i} s~popisem vstupního komunikačního rozhraní. Dále je dobré použít přepínač
 \textit{-w <názevSouboru>} pro ukládání přijatých dat do souboru, \textit{-t} pro uložení datové
 hlavičky příchozích
 dat a \textit{-T}, který ukládá i časové značky.
 
 Příklad spuštění: \textit{logger -t -T -i u:alert -w alert-data.log}
 
 \item \textbf{Logreplay}
 
 Modul \textit{Logreplay} lze využít pro přehrání zachyceného provozu pomocí modulu \textit{Logger}.
 Mezi povinné
 přepínače patří
 \textit{-i}, za kterým následuje popis výstupního komunikačního rozhraní, a \textit{-f <názevSoboru>}
 pro načtení
 uloženého provozu. Vhodným přepínačem může být \textit{-n}, který neposílá po přehrání EOF (End Of File)
 zprávu. Pokud soubor se zachycenými daty obsahuje časové značky každého záznamu, tak jsou 
 jednotlivé zprávy odesílány dle těchto značek.
 
 Ukázka použití: \textit{logreplay -i u:zwave -f z-wave-connection.log -n}
 
 \item \textbf{Merger}
 
 Poslední uvedený NEMEA modul se používá pro slučování několika různých vstupních UniRec
 záznamů do jednoho společného, který je odesílán výstupním rozhraním. Očekávanými parametry jsou
 \textit{-i} s~popisem komunikačního rozhraní a \textit{-n} určující počet vstupních rozhraní,
 který odpovídá
 zadanému popisu. Název výstupu je vždy uveden jako poslední položka v~rámci přepínače \textit{-i}.
 
 Možné zavedení: \textit{merger u:DriverStasts,u:NodeStats,u:merged -n 2}
 

\end{itemize}


\chapter{Popis množiny senzorových informací} \label{sensorData}
Tato část přílohy obsahuje kompletní popis množiny informací, kterou lze v~současné době získat
o~provozu senzorových protokolů v~rámci BeeeOn brány. Při popisu byla množina informací rozdělena
do příslušných událostí, které
jsou reprezentovány samostatnou sekcí.

\section{onDriverStats}
\begin{description}
 \item \textbf{SOAFCount}: počet přijatých Start Of Frame bajtů
 \item \textbf{ACKWaiting}: počet nevyžádaných zpráv při čekání na potvrzení
 \item \textbf{readAborts}: počet nedokončených operacích čtení z~důvodu překročení časového limitu
 \item \textbf{badChecksum}: počet zpráv se špatných kontrolním součtem
 \item \textbf{readCount}: počet úspěšně přijatých zpráv
 \item \textbf{writeCount}: počet úspěšně odeslaných zpráv
 \item \textbf{CANCount}: počet přijatých CAN bajtů
 \item \textbf{NAKCount}: počet přijatých negativních potvrzení
 \item \textbf{ACKCount}: počet přijatých potvrzení
 \item \textbf{OOFCount}: počet přijatých Out Of Frame bajtů
 \item \textbf{dropped}: počet zahozených zpráv 
 \item \textbf{retries}: počet znovu odeslaných zpráv
 \item \textbf{callbacks}: počet neočekávaných callbacků
 \item \textbf{badroutes} počet neodeslaných zpráv kvůli směrování
 \item \textbf{noACK}: počet neobdržených potvrzení
 \item \textbf{netBusy}: počet zpráv s~chybovým stavem
 \item \textbf{notIdle}: počet zpráv se stavem not idle
 \item \textbf{nonDelivery}:počet nedoručených zpráv
 \item \textbf{routedBusy}:  počet přijatých zpráv se stavem routed busy
 \item \textbf{broadcastReadCount}: počet přijatých všesměrových zpráv
 \item \textbf{broadcastWriteCount}:počet odeslaných všesměrových zpráv
\end{description}

\section{onNodeStats}
\begin{description}
 \item \textbf{sentCount}: počet odeslaných zpráv
 \item \textbf{sentFailed}: počet zpráv, které se nepodařilo odeslat
 \item \textbf{receivedCount}: počet přijatých zpráv
 \item \textbf{receivedDuplications}: počet přijatých duplikovaných zpráv
 \item \textbf{receivedUnsoliced}: počet přijatých nevyžádaných zpráv
 \item \textbf{lastRequestRTT}: RTT poslední odeslané zprávy
 \item \textbf{lastResponseRTT}: RTT poslední přijaté odpovědi
 \item \textbf{averageRequestRTT}: průměr z~lastRequestRTT
 \item \textbf{averageResponseRTT}: průměr z~lastResponseRTT
 \item \textbf{quality}: kvalita připojení
 \item \textbf{nodeID}: identifikátor senzoru
\end{description}

\section{onHCIStats}
\begin{description}
 \item \textbf{address}: adresa BLE rozhraní 
 \item \textbf{aclMtu}: velikost MTU pro ACL zprávy
 \item \textbf{aclPackets}: velikost zásobníku pro ACL zprávy 
 \item \textbf{scoMtu}: velikost MTU pro SCO zprávy
 \item \textbf{scoPackets}: velikost zásobníku pro SCO zprávy
 \item \textbf{rxErrors}: počet přijatých chybových zpráv
 \item \textbf{txErrors}: počet odeslaných chybových zpráv
 \item \textbf{rxEvents}: počet přijatých BLE událostí
 \item \textbf{txCmds}: počet odeslaných BLE příkazů
 \item \textbf{rxAcls}: počet přijatých ACL zpráv
 \item \textbf{txAcls}: počet odeslaných ACL zpráv
 \item \textbf{rxScos}: počet přijatých SCO zpráv
 \item \textbf{txScos}: počet odeslaných SCO zpráv
 \item \textbf{rxBytes}: počet přijatých bytů
 \item \textbf{txBytes}: počet odeslaných bytů
\end{description}

\section{onExport}
\begin{description}
 \item \textbf{value}: senzorová hodnota
 \item  \textbf{deviceID}: identifikátor senzoru
\end{description}

\chapter{Obsah přiloženého CD}

\begin{figure}
	\dirtree{%
		.1 readme.txt\DTcomment{stručný popis obsahu CD}.
		.1 src\DTcomment{zdrojové soubory}.
		.2 impl\DTcomment{zdrojové kódy implementace}.
		.3 collector\DTcomment{zdrojové kódy kolektoru}.
		.3 detector\DTcomment{zdrojové kódy detektoru}.
		.3 mux\DTcomment{zdrojové kódy multiplexoru}.
		.3 demux\DTcomment{zdrojové kódy demultiplexoru}.
		.3 test\DTcomment{soubory pro testování}.
		.2 thesis\DTcomment{zdrojová forma práce ve formátu \LaTeX{}}.
		.1 text\DTcomment{text práce}.
		.2 DP\_Soukup\_Dominik.pdf\DTcomment{text práce ve formátu PDF}.
		.2 ZadaniDP\_Soukup\_Dominik.pdf\DTcomment{zadání práce ve formátu PDF}.
	}
\end{figure}

\end{document}
